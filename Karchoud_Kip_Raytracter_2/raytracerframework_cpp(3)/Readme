Students: Jamil Karchoud & Ruben Kip


This assignment was about: Raytracing 2


Division of labour: (requirement for second year computer graphics)

We worked most of the time in the practicles for the assignment. We did part 1 fully in the practicles, part 2 was done from home by Ruben and part 3 was mostly done in the praticles and we both worked on it from home.

#####
Explanation added code


-- Part 1 Optical laws --
First we looked for the the minimal distance Hit with the objects and if there was no Hit we returned to background color. Then we went over every lightsource to create multiple shadows. In order to create correct shadows we added a small constant to the shadowRay, otherwise it could interact with the object. 
We calculated the shadowRay the following: we subtracted the hit from light position and normalize this in order to get the direction of the shadow. And now we can use the constant added to the direction and multiplied it with the hit to get the shadowRay. After that we made a recursive call to trace to get our 
reflections with a maximal recurision depth of 2. We used the formula's from the lecture slides and normalized the outcome to get the direction of the reflectionRay, again we added a small constant for the same reason to the direction of the reflection. In order to get the reflectedColor we made our recursive 
call to trace with the reflectionRay and a count in order to have a maximum of 2 reflections and we multiplied the recursive call with the specular component of the material. In the end we returned an addition of the reflectedColor and Color for our final colors.

-- Part 2 Anti-aliasing --
Our supersampling is done like shown in the figure. So we divide the pixel by parts of our alliasing level, so parts of 1/(alliasing + 1). Which gives us equal/symmetric points along the pixel in x and y axis. We raytrace for each of these points then we average the color over the returned total color which is the result of each ray shot from each of these points. 

-- Part 3 Texturing --
In order to get the texture coordinates of the sphere we needed to calculate our U V vector, this was done with with formula's from the slides and the x/y/z from the normalized hit=(hit-position), then the color elment is substituted in our shading calculations for the color of the texture.


#####
Problems/difficulties:

- The rotation of a sphrere was misread (https://en.wikipedia.org/wiki/Rodrigues%27_rotation_formula) and so we had regular product instead of cross/dot products.
- A lot of small questions and problems like wrong path, c++ pointers etc.

#####
Bonus code: 
None, maybe in the future







